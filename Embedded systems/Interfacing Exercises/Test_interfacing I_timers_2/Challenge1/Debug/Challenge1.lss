
Challenge1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001c8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  00000266  2**0
                  ALLOC
  3 .stab         00000444  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006eb  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 00 	call	0xca	; 0xca <main>
  8a:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer0_ovf>:
#include <avr/interrupt.h>

char num = 0;
char tick = 0;

void Timer0_ovf(void){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<FOC0) | (1<<CS02);
  9a:	e3 e5       	ldi	r30, 0x53	; 83
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	80 83       	st	Z, r24
	TCNT0 = 0;
  a2:	e2 e5       	ldi	r30, 0x52	; 82
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	TIMSK |= (1<<TOIE0);
  a8:	a9 e5       	ldi	r26, 0x59	; 89
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e9 e5       	ldi	r30, 0x59	; 89
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8c 93       	st	X, r24
	SREG |= (1<<7);
  b6:	af e5       	ldi	r26, 0x5F	; 95
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ef e5       	ldi	r30, 0x5F	; 95
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8c 93       	st	X, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <main>:


int main(){
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	2f 97       	sbiw	r28, 0x0f	; 15
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	char segments[10] = {0x7E, 0x0C, 0xB6, 0x9E, 0xCC, 0xDA, 0xFA, 0x0E, 0xFE, 0xDE};
  de:	ce 01       	movw	r24, r28
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	9c 87       	std	Y+12, r25	; 0x0c
  e4:	8b 87       	std	Y+11, r24	; 0x0b
  e6:	e0 e6       	ldi	r30, 0x60	; 96
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	fe 87       	std	Y+14, r31	; 0x0e
  ec:	ed 87       	std	Y+13, r30	; 0x0d
  ee:	fa e0       	ldi	r31, 0x0A	; 10
  f0:	ff 87       	std	Y+15, r31	; 0x0f
  f2:	ed 85       	ldd	r30, Y+13	; 0x0d
  f4:	fe 85       	ldd	r31, Y+14	; 0x0e
  f6:	00 80       	ld	r0, Z
  f8:	8d 85       	ldd	r24, Y+13	; 0x0d
  fa:	9e 85       	ldd	r25, Y+14	; 0x0e
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	9e 87       	std	Y+14, r25	; 0x0e
 100:	8d 87       	std	Y+13, r24	; 0x0d
 102:	eb 85       	ldd	r30, Y+11	; 0x0b
 104:	fc 85       	ldd	r31, Y+12	; 0x0c
 106:	00 82       	st	Z, r0
 108:	8b 85       	ldd	r24, Y+11	; 0x0b
 10a:	9c 85       	ldd	r25, Y+12	; 0x0c
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	9c 87       	std	Y+12, r25	; 0x0c
 110:	8b 87       	std	Y+11, r24	; 0x0b
 112:	9f 85       	ldd	r25, Y+15	; 0x0f
 114:	91 50       	subi	r25, 0x01	; 1
 116:	9f 87       	std	Y+15, r25	; 0x0f
 118:	ef 85       	ldd	r30, Y+15	; 0x0f
 11a:	ee 23       	and	r30, r30
 11c:	51 f7       	brne	.-44     	; 0xf2 <main+0x28>
	DDRA = 0xFE;
 11e:	ea e3       	ldi	r30, 0x3A	; 58
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	8e ef       	ldi	r24, 0xFE	; 254
 124:	80 83       	st	Z, r24
	DDRC |= (1<<6);
 126:	a4 e3       	ldi	r26, 0x34	; 52
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e4 e3       	ldi	r30, 0x34	; 52
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	8c 93       	st	X, r24
	PORTA = segments[0];
 134:	eb e3       	ldi	r30, 0x3B	; 59
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	80 83       	st	Z, r24
	PORTC |= (1<<6);
 13c:	a5 e3       	ldi	r26, 0x35	; 53
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8c 93       	st	X, r24
	Timer0_ovf();
 14a:	0e 94 49 00 	call	0x92	; 0x92 <Timer0_ovf>
	while(1){
		PORTA = segments[num];
 14e:	ab e3       	ldi	r26, 0x3B	; 59
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	80 91 6a 00 	lds	r24, 0x006A
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	fc 01       	movw	r30, r24
 160:	e2 0f       	add	r30, r18
 162:	f3 1f       	adc	r31, r19
 164:	80 81       	ld	r24, Z
 166:	8c 93       	st	X, r24
 168:	f2 cf       	rjmp	.-28     	; 0x14e <main+0x84>

0000016a <__vector_11>:
	}
}

ISR (TIMER0_OVF_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	tick++;
 17e:	80 91 6b 00 	lds	r24, 0x006B
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 6b 00 	sts	0x006B, r24
	if (tick == 245){
 188:	80 91 6b 00 	lds	r24, 0x006B
 18c:	85 3f       	cpi	r24, 0xF5	; 245
 18e:	91 f4       	brne	.+36     	; 0x1b4 <__vector_11+0x4a>
		if (num < 9){
 190:	80 91 6a 00 	lds	r24, 0x006A
 194:	89 30       	cpi	r24, 0x09	; 9
 196:	30 f4       	brcc	.+12     	; 0x1a4 <__vector_11+0x3a>
			num++;
 198:	80 91 6a 00 	lds	r24, 0x006A
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 6a 00 	sts	0x006A, r24
 1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <__vector_11+0x46>
		}
		else if (num == 9){
 1a4:	80 91 6a 00 	lds	r24, 0x006A
 1a8:	89 30       	cpi	r24, 0x09	; 9
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <__vector_11+0x46>
			num = 0;
 1ac:	10 92 6a 00 	sts	0x006A, r1
		}
		tick = 0;
 1b0:	10 92 6b 00 	sts	0x006B, r1
	}
}
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
