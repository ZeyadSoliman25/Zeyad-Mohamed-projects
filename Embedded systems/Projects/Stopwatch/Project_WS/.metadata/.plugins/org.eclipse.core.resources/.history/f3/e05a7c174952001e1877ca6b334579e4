/*	Author: Zeyad Mohamed
 * 	Project: Stop watch
 * 	date created: 12/9/2023
 */

#include<avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>


char segments_disp[18]= {0}; // array to hold 3 time values to be displayed on the 6 displays 7seg

char disp_value = 0; // to determine which time value is displayed(sec1 , sec2, min1, min2, hr1, hr2)
char stored_value = 12; // the begining of the first stored time value for the lap split mode
char lap_split_flag = 0; // flag to determine the storing or showing the stored lap values
char alarm_set[6] = {0}; // to store the time value at which the alarm is triggered
char alarm_flag = 0;// flag to determine to show the alarm time value or the current time value
char alarm_disp = 0; // to to determine which alarm time value is displayed(sec1 , sec2, min1, min2, hr1, hr2)
char alarm_set_disp = 0;


void Timer1_ctc(void){
	TCCR1A = (1<<WGM12); // enabling CTC mode
	TCCR1B = (1<<CS12) | (1<<CS10) | (1<<WGM12);// using prescaler FCPU/1024
	TCNT1 = 0;
	OCR1A = 970;// taking into consideration the total delay in the main code
	TIMSK |= (1<<OCIE1A); // masking for compare A is enabled
	SREG |= (1<<7); // global interrupt enabled
}


void Int0_init(void){
	DDRD &= ~(1<<2);
	PORTD |= (1<<2);
	MCUCR |= (1<<ISC01);
	MCUCR &= ~(1<<ISC00);
	GICR |= (1<<INT0);
	SREG |= (1<<7);
}


void INT1_init (void){
	DDRD &= ~(1<<3);
	MCUCR |= (1<<ISC11) | (1<<ISC10);
	GICR |= (1<<INT1);
	SREG |= (1<<7);
}


void INT2_init (void){
	DDRB &= ~(1<<2);
	PORTB |= (1<<2);
	MCUCSR &= ~(1<<ISC2);
	GICR |= (1<<INT2);
	SREG |= (1<<7);
}

/* function to show the values on the 7seg */
void segment_disp (char display, char *time_values){
	//looping through the time values and enabling and disabling the 7segs
		PORTA |= (1<<0);
		PORTC = time_values[display];
		_delay_ms(5);
		PORTA &= ~(1<<0);
		PORTA |= (1<<1);
		PORTC = time_values[display + 1];
		_delay_ms(5);
		PORTA &= ~(1<<1);
		PORTA |= (1<<2);
		PORTC = time_values[display + 2];
		_delay_ms(5);
		PORTA &= ~(1<<2);
		PORTA |= (1<<3);
		PORTC = time_values[display + 3];
		_delay_ms(5);
		PORTA &= ~(1<<3);
		PORTA |= (1<<4);
		PORTC = time_values[display + 4];
		_delay_ms(5);
		PORTA &= ~(1<<4);
		PORTA |= (1<<5);
		PORTC = time_values[display + 5];
		_delay_ms(5);
		PORTA &= ~(1<<5);
}

int main(){
	DDRC = 0x0F;
	DDRA = 0x3F;
	DDRD &= (~(1<<4)) & (~(1<<5));
	PORTD |= (1<<4) | (1<<5);
	PORTC = 0;
	PORTA = 0;
	Timer1_ctc();
	Int0_init();
	INT1_init();
	INT2_init();
	while (1){
		if (alarm_flag < 2){
			segment_disp (disp_value, segments_disp);
			if (!(PIND & (1<<4))){
				_delay_ms(30);
				if (!(PIND & (1<<4))){
					alarm_flag = 2;
				}
			}
		}
		else if (alarm_flag >= 2){ // alarm is being set when the time is paused
			segment_disp(alarm_disp, alarm_set);
			if (!(PIND & (1<<4))){
				_delay_ms(30);
				if (!(PIND & (1<<4))){
					if (alarm_set_disp < 6){
						alarm_set_disp ++ ;
					}
					else{
						alarm_set_disp = 0;
					}
				}
			}
			if (!(PIND & (1<<5))){
				_delay_ms(30);
				if (!(PIND & (1<<5))){
					if (alarm_set_disp % 2 == 0){
						if (alarm_set[alarm_set_disp] < 9){
							alarm_set[alarm_set_disp] ++ ;
						}
						else {
							alarm_set[alarm_set_disp] = 0 ;
						}
					}
					else if (alarm_set_disp == 5){
						if (alarm_set[alarm_set_disp] < 9){
							alarm_set[alarm_set_disp] ++ ;
						}
						else {
							alarm_set[alarm_set_disp] = 0 ;
						}
					}
					else if (alarm_set_disp % 2 != 0){
						if (alarm_set[alarm_set_disp] < 6){
							alarm_set[alarm_set_disp] ++ ;
						}
						else {
							alarm_set[alarm_set_disp] = 0 ;
						}
					}

				}
			}
		}
	}
}

ISR (TIMER1_COMPA_vect){
	segments_disp[0]++;
	if (segments_disp[disp_value] > 9){
		segments_disp[disp_value] = 0;
		segments_disp[disp_value + 1] ++ ;
	}
	if (segments_disp[disp_value + 1] > 5){
		segments_disp[disp_value + 1] = 0;
		segments_disp[disp_value + 2] ++ ;
	}
	if (segments_disp[disp_value + 2] > 9){
		segments_disp[disp_value + 2] = 0;
		segments_disp[disp_value + 3] ++;
	}
	if (segments_disp[disp_value + 3] > 5){
		segments_disp[disp_value + 3] = 0;
		segments_disp[disp_value + 4] ++;
	}
	if (segments_disp[disp_value + 4] > 9){
		segments_disp[disp_value + 4] = 0;
		segments_disp[disp_value + 5] ++;
	}
	if (segments_disp[disp_value + 5] > 9){
		segments_disp[disp_value + 5] = 0;
	}

}


ISR(INT0_vect){
	segments_disp[disp_value] = 0;
	segments_disp[disp_value + 1] = 0;
	segments_disp[disp_value + 2] = 0;
	segments_disp[disp_value + 3] = 0;
	segments_disp[disp_value + 4] = 0;
	segments_disp[disp_value + 5] = 0;
	TCNT1 = 0; // to the start the counting of the 1 sec again
}


ISR (INT1_vect){
	TCCR1B &= (~(1<<CS12)) & (~(1<<CS11)) & (~(1<<CS10));
	alarm_flag = 1;
	if (lap_split_flag < 2){
		lap_split_flag ++;
		/*storing the values in the rest of the array */
		segments_disp[stored_value] = segments_disp[disp_value] ;
		segments_disp[stored_value + 1] = segments_disp[disp_value + 1] ;
		segments_disp[stored_value + 2] = segments_disp[disp_value + 2] ;
		segments_disp[stored_value + 3] = segments_disp[disp_value + 3] ;
		segments_disp[stored_value + 4] = segments_disp[disp_value + 4] ;
		segments_disp[stored_value + 5] = segments_disp[disp_value + 5] ;

		if (stored_value > 6){
			stored_value -= 6;
		}
		else {
			stored_value = 12;
		}
	}
	// to show the stored lap time values in addition to the current time
	if (lap_split_flag == 2){
		if (stored_value <= 12){
			stored_value -= 6;
		}
		else {
			stored_value = 12;
		}
		disp_value = stored_value;
	}
}


ISR (INT2_vect){
	TCCR1B |= (1<<CS12) | (1<<CS10);
	disp_value = 0;
	alarm_flag = 0;
	if (lap_split_flag == 3){
		disp_value = 0;
	}
}
